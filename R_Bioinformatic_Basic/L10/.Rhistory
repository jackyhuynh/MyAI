mylist <- findPotentialStartsAndStops2(sequence)
positions <- mylist[[1]]
types <- mylist[[2]]
# Make vectors "orfstarts" and "orfstops" to store the predicted start and stop codons of ORFs
orfstarts <- numeric()
orfstops <- numeric()
# Make a vector "orflengths" to store the lengths of the ORFs
orflengths <- numeric()
# Print out the positions of ORFs in the sequence:
# Find the length of vector "positions"
numpositions <- length(positions)
# There must be at least one start codon and one stop codon to have an ORF.
if (numpositions >= 2)
{
for (i in 1:(numpositions-1))
{
posi <- positions[i]
typei <- types[i]
found <- 0
while (found == 0)
{
for (j in (i+1):numpositions)
{
posj <- positions[j]
typej <- types[j]
posdiff <- posj - posi
posdiffmod3 <- posdiff %% 3
# Add in the length of the stop codon
orflength <- posj - posi + 3
if (typei == "atg" && (typej == "taa" || typej == "tag" || typej == "tga") && posdiffmod3 == 0)
{
# Check if we have already used the stop codon at posj+2 in an ORF
numorfs <- length(orfstops)
usedstop <- -1
if (numorfs > 0)
{
for (k in 1:numorfs)
{
orfstopk <- orfstops[k]
if (orfstopk == (posj + 2)) { usedstop <- 1 }
}
}
if (usedstop == -1)
{
orfstarts <- append(orfstarts, posi, after=length(orfstarts))
orfstops <- append(orfstops, posj+2, after=length(orfstops)) # Including the stop codon.
orflengths <- append(orflengths, orflength, after=length(orflengths))
}
found <- 1
break
}
if (j == numpositions) { found <- 1 }
}
}
}
}
# Sort the final ORFs by start position:
indices <- order(orfstarts)
orfstarts <- orfstarts[indices]
orfstops <- orfstops[indices]
# Find the lengths of the ORFs that we have
orflengths <- numeric()
numorfs <- length(orfstarts)
for (i in 1:numorfs)
{
orfstart <- orfstarts[i]
orfstop <- orfstops[i]
orflength <- orfstop - orfstart + 1
orflengths <- append(orflengths,orflength,after=length(orflengths))
}
mylist <- list(orfstarts, orfstops, orflengths)
return(mylist)
}
# Choose the ACNUC
choosebank("genbank")
My_Que <- query("My_Que", "AC=FJ882953")
######################################################
# Find all potential start and stop sequences
######################################################
findPotentialStartsAndStops2 <- function(MySeq)
{
# Define a vector with the sequences of potential start and stop codons
codons <- c("atg", "taa", "tag", "tga")
# Find the start positions of all occurrences of "atg" in sequence "sequence"
positions <- start(matchPattern("atg", MySeq ))
# Find the total number of potential start and stop codons in sequence "sequence"
numoccurrences <- length(positions)
# Make a vector "types" containing "numoccurrences" copies of "codon"
types <- rep("atg", numoccurrences)
# Find the number of occurrences of each type of potential start or stop codon
for (i in 2:4)
{
codon <- codons[i]
# Find the start positions of all occurrences of "codon" in sequence "sequence"
codonpositions <- start(matchPattern(codon,MySeq ))
# Find the total number of potential start and stop codons in sequence "sequence"
numoccurrences <- length(codonpositions)
# Add the vector "codonpositions" to the end of vector "positions":
positions <- append(positions, codonpositions, after=length(positions))
# Add the vector "rep(codon, numoccurrences)" to the end of vector "types":
types <- append(types, rep(codon, numoccurrences), after=length(types))
}
# Sort the vectors "positions" and "types" in order of position along the input sequence:
indices <- order(positions)
positions <- positions[indices]
types <- types[indices]
# Return a list variable including vectors "positions" and "types":
mylist <- list(positions,types)
names(mylist) <- c("positions", "types")
return(mylist)
}
# sequences is pass a a DNA sequences
generateSeqsWithMultinomialModel <- function(sequence, index)
{
My_Base1 <- count(sequence, 1)
# Calculate the percentage in sequences
Pro_Seq <-
c((My_Base1["a"] / sum(My_Base1) * 100),
(My_Base1["g"] / sum(My_Base1) * 100),
(My_Base1["c"] / sum(My_Base1) * 100),
(My_Base1["t"] / sum(My_Base1) * 100)
)
My_Rad_Seq = {
}
for (i in 1:index) {
My_Rad_Seq <- c (My_Rad_Seq,
c2s(sample(
c('a', 'c', 'g', 't'),
length(sequence),
replace = TRUE,
prob = Pro_Seq
)))
}
return (My_Rad_Seq)
}
#generate random sequences
randseqs <- generateSeqsWithMultinomialModel(getSequence(My_Que$req[[1]]), 20)
# sequences is pass a a DNA sequences
generateSeqsWithMultinomialModel <- function(sequence, index)
{
My_Base1 <- count(sequence, 1)
# Calculate the percentage in sequences
Pro_Seq <-
c((My_Base1["a"] / sum(My_Base1) * 100),
(My_Base1["g"] / sum(My_Base1) * 100),
(My_Base1["c"] / sum(My_Base1) * 100),
(My_Base1["t"] / sum(My_Base1) * 100)
)
My_Rad_Seq = {
}
for (i in 1:index) {
My_Rad_Seq <- c (My_Rad_Seq,
c2s(sample(
c('a', 'c', 'g', 't'),
length(sequence),
replace = TRUE,
prob = Pro_Seq
)))
}
return (My_Rad_Seq)
}
#generate random sequences
randseqs <- generateSeqsWithMultinomialModel(getSequence(My_Que$req[[1]]), 20)
# find ORF
randseqorflengths <- numeric() # Tell R that we want to make a new vector of numbers
for (i in 1:20)
{
print(i)
randseq <- randseqs[i] # Get the ith random sequence
mylist <- findORFsinSeq(randseq) # Find ORFs in "randseq"
lengths <- mylist[[3]] # Find the lengths of ORFs in "randseq"
randseqorflengths <- append(randseqorflengths, lengths, after=length(randseqorflengths))
}
# plot a histogram of the lengths of the ORFs real vs. random
par(mfrow = c(1,2)) # Make a picture with two plots side-by-side (one row, two columns)
bins <- seq(0,11000,50) # Set the bins for the histogram
hist(randseqorflengths, breaks=bins, col="red", xlim=c(0,1000))
#find the longest random gene
x = max(randseqorflengths)
#use it as a threshold, and discard all ORFs found in the real sequence that are shorter than this
summary(randseqorflengths > x)
#find and use the 99th quantile as a threshold
quantile(randseqorflengths, probs=c(0.99))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(seqinr)
library(Biostrings)
randseqorflengths
View(randseqorflengths)
## Question
## Question
## Question
knitr::opts_chunk$set(echo = TRUE)
choosebank("genbank")
library(seqinr)
choosebank("genbank")
closebank()
# Source code for clean Alignment and print Multiple Alignment function
source("cleanAlignment.R")
source("printMultipleAlignment")
library(seqinr)
# Source code for clean Alignment and print Multiple Alignment function
source("cleanAlignment.R")
source("printMultipleAlignment")
source("printMultipleAlignment.R")
choosebank("uniprot")
choosebank("uniProt")
library(seqinr)
choosebank("uniProt")
choosebank("swissprot")
"YP_009725305"<-query("YP_009725305", "AC=YP_009725305")
closebank()
# Load the protein sequences by swissprot
choosebank("genbank")
"YP_009725305"<-query("YP_009725305", "AC=YP_009725305")
"YP_009725305"<-query("YP_009725305","AC=YP_009725305")
"YP_009725305"<-query("YP_009725305","AC=YP_009725305.1")
"YP_009725305"<-query("YP_009725305","AC=YP_009725305")
"YP_009724395"<-query("YP_009724395","AC=YP_009724395")
"QIS60515"<-query("QIS60515","AC=QIS60515")
("QIS60709","AC=QIS60709")
"QIS60709"<-query("QIS60709","AC=QIS60709")
"QIS60539"<-query("QIS60539","AC=QIS60539")
"QIS60515"<-query("QIS60515","AC=QIS60515")
"YP_009725297"<-query("YP_009725297","AC=YP_009725297")
"YP_009724395"<-query("YP_009724395","AC=YP_009724395")
"YP_009725305"<-query("YP_009725305","AC=YP_009725305")
getwd()
setwd("C:/Users/Valued Customer/Documents/source/R_for_Bioinformatic/R_Bioinformatic_Basic/L10")
virus <- read.fasta("VIRUS.FASTA")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(seqinr)
library(Biostrings)
# Choose the ACNUC
choosebank("genbank")
# Choose the ACNUC
choosebank("genbank")
My_Que <- query("My_Que", "AC=FJ882953")
View(My_Que)
# Alignment Object
obj<-read.alignment(file="VIRUS.phy", format = 'phylip')
# Alignment Object
obj<-read.alignment(file="VIRUS.phy", format = 'phylip')
View(obj)
obj[["seq"]]
dist.alignment(obj)
scores <- read.table(file="score.qscores")
scores <- read.table(file="scores.qscores")
View(scores)
mean(scores$V5)
mean(scores$V7)
View(printMultipleAlignment)
printMultipleAlignment(obj,40)
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)[1]
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
prettyprint<-printMultipleAlignment(obj,40)
View(obj)
obj[["seq"]]
obj[["seq"]][[1]]
substr(obj[["seq"]][[1]],1,40)
for (i in 1:6)
{
substr(obj[["seq"]][[i]],1,40)
}
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
count("--------------mkiilflalit--latcelyhyqecv")
count("--------------mkiilflalit--latcelyhyqecv", wordsize = 1)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
print("/n")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
print("n\")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
knitr::opts_chunk$set(echo = TRUE)
library(seqinr)
# Source code for clean Alignment and print Multiple Alignment function
source("cleanAlignment.R")
source("printMultipleAlignment.R")
# Load the protein sequences by swissprot
# choosebank("genbank")
# "YP_009725305"<-query("YP_009725305","AC=YP_009725305")
# "YP_009724395"<-query("YP_009724395","AC=YP_009724395")
# "YP_009725297"<-query("YP_009725297","AC=YP_009725297")
# "QIS60515"<-query("QIS60515","AC=QIS60515")
# "QIS60539"<-query("QIS60539","AC=QIS60539")
# "QIS60709"<-query("QIS60709","AC=QIS60709")
# closebank()
virus <- read.fasta("VIRUS.FASTA")
# Read in Multiple Alignment Sequences
obj<-read.alignment(file="VIRUS.phy", format = 'phylip')
# Download all the column scores  to file using ClustalX
# Read the scores using read.table
scores <- read.table(file="scores.qscores")
# use the mean to calculate the average score
mean(scores$V7)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
cat("\n")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
cat("\n")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
cat("\n")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
cat("\n")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
# Load the protein sequences by swissprot
# choosebank("genbank")
# "YP_009725305"<-query("YP_009725305","AC=YP_009725305")
# "YP_009724395"<-query("YP_009724395","AC=YP_009724395")
# "YP_009725297"<-query("YP_009725297","AC=YP_009725297")
# "QIS60515"<-query("QIS60515","AC=QIS60515")
# "QIS60539"<-query("QIS60539","AC=QIS60539")
# "QIS60709"<-query("QIS60709","AC=QIS60709")
# closebank()
virus <- read.fasta("VIRUS.FASTA")
# Read in Multiple Alignment Sequences
obj<-read.alignment(file="VIRUS.phy", format = 'phylip')
# Download all the column scores  to file using ClustalX
# Read the scores using read.table
scores <- read.table(file="scores.qscores")
# use the mean to calculate the average score
mean(scores$V7)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
cat("\n")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
cat("\n")
print("Using Multiple Alignment Printting with chunk size = 40")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
cat("\n")
print("Using Multiple Alignment Printting with chunk size = 40")
cat("\n")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
data <- read.table("~/source/R_for_Bioinformatic/R_Bioinformatic_Basic/L10/data.txt", quote="\"", comment.char="")
View(data)
# Load the protein sequences by swissprot
# choosebank("genbank")
# "YP_009725305"<-query("YP_009725305","AC=YP_009725305")
# "YP_009724395"<-query("YP_009724395","AC=YP_009724395")
# "YP_009725297"<-query("YP_009725297","AC=YP_009725297")
# "QIS60515"<-query("QIS60515","AC=QIS60515")
# "QIS60539"<-query("QIS60539","AC=QIS60539")
# "QIS60709"<-query("QIS60709","AC=QIS60709")
# closebank()
virus <- read.fasta("VIRUS.FASTA")
# Load the protein sequences by swissprot
# choosebank("genbank")
# "YP_009725305"<-query("YP_009725305","AC=YP_009725305")
# "YP_009724395"<-query("YP_009724395","AC=YP_009724395")
# "YP_009725297"<-query("YP_009725297","AC=YP_009725297")
# "QIS60515"<-query("QIS60515","AC=QIS60515")
# "QIS60539"<-query("QIS60539","AC=QIS60539")
# "QIS60709"<-query("QIS60709","AC=QIS60709")
# closebank()
virus <- read.fasta("VIRUS.FASTA")
# Read in Multiple Alignment Sequences
obj<-read.alignment(file="VIRUS.phy", format = 'phylip')
# Download all the column scores  to file using ClustalX
# Read the scores using read.table
scores <- read.table(file="scores.qscores")
# use the mean to calculate the average score
mean(scores$V7)
# Read in Multiple Alignment Sequences
obj<-read.alignment(file="VIRUS.phy", format = 'phylip')
# Download all the column scores  to file using ClustalX
# Read the scores using read.table
scores <- read.table(file="scores.qscores")
# use the mean to calculate the average score
mean(scores$V7)
# Print the first 40 characters of the alignmnet Object using Substring
for (i in 1:6)
{
print( substr(obj[["seq"]][[i]],1,40))
}
cat("\n")
print("Using Multiple Alignment Printting with chunk size = 40")
cat("\n")
# Can also use the printMultipleAlignment
# Use the print Multiple Alignment with chunksize = 40 to print the alignment
printMultipleAlignment(obj,40)
View(data)
data[1,]
data[1,][3,]
write.fasta(c(data[2,],data[4,],data[6,],data[8,],data[10,],data[12,],data[14,]),c(data[1,],data[3,],data[5,],data[7,],data[9,],data[11,],data[13,]),file.out = "dataR.fasta")
write.fasta(list(data[2,],data[4,],data[6,],data[8,],data[10,],data[12,],data[14,]),list(data[1,],data[3,],data[5,],data[7,],data[9,],data[11,],data[13,]),file.out = "dataR.fasta")
dataR <- read.fasta("data")
dataR <- read.fasta("data.fasta")
data==dataR
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Read in Multiple Alignment Sequences
objAlignment<-read.alignment(file="data.phy", format = 'phylip')
# Read in Multiple Alignment Sequences
objAlignment<-read.alignment(file="data.phy", format = 'phylip')
# Print the first 20 characters of the alignment Object (first 3 sequences) using Substring
for (i in 1:3)
{
print( substr(objAlignment[["seq"]][[i]],1,20))
}
dist.alignment(objAlignment)
cleanedvirusaln <- cleanAlignment(objAlignment, 30, 30)
View(cleanedvirusaln)
printMultipleAlignment(cleanedvirusaln)
cleanedvirusaln <- cleanAlignment(objAlignment, 30, 100)
printMultipleAlignment(cleanedvirusaln)
cleanedvirusaln <- cleanAlignment(objAlignment, 100, 100)
printMultipleAlignment(cleanedvirusaln)
cleanedvirusaln <- cleanAlignment(objAlignment, 100, 75)
printMultipleAlignment(cleanedvirusaln)
cleanedvirusaln <- cleanAlignment(objAlignment, 75, 100)
printMultipleAlignment(cleanedvirusaln)
cleanedvirusaln <- cleanAlignment(objAlignment, 75, 100)
printMultipleAlignment(cleanedvirusaln)
cleanedvirusaln <- cleanAlignment(objAlignment, 100, 75)
printMultipleAlignment(cleanedvirusaln)
cleanedvirusaln <- cleanAlignment(objAlignment, 75, 100)
printMultipleAlignment(cleanedvirusaln)
cleanedvirusaln <- cleanAlignment(objAlignment, 25, 100)
printMultipleAlignment(cleanedvirusaln)
length(objAlignment)
View(objAlignment)
objAlignment[["seq"]]
length(objAlignment$seq)
cleanedvirusaln <- cleanAlignment(objAlignment, 25, 100)
View(cleanedvirusaln)
length(cleanedvirusaln$seq)
for (i in 1:6)
{
print( sub(cleanedvirusaln[["seq"]][[i]],"",objAlignment[["seq"]][[i]]))
}
for (i in 1:6)
{
print( sub(cleanedvirusaln[["seq"]][[i]]," ",objAlignment[["seq"]][[i]]))
}
cleanedvirusaln[["seq"]][[1]]
objAlignment[["seq"]][[1]]
objAlignment[["seq"]][[1]]-cleanedvirusaln[["seq"]][[1]]
sub(cleanedvirusaln[["seq"]][[1]],objAlignment[["seq"]][[1]])
sub(cleanedvirusaln[["seq"]][[1]],'',objAlignment[["seq"]][[1]])
sub('',cleanedvirusaln[["seq"]][[1]],objAlignment[["seq"]][[1]])
sub(cleanedvirusaln[["seq"]][[1]],'',objAlignment[["seq"]][[1]])
