}
mylist <- list(orfstarts, orfstops, orflengths)
return(mylist)
}
#generate random sequences
randseqs <- generateSeqsWithMultinomialModel(getSequence(My_Que$req[[1]]), 20)
# find ORF
randseqorflengths <- numeric() # Tell R that we want to make a new vector of numbers
for (i in 1:20)
{
print(i)
randseq <- randseqs[i] # Get the ith random sequence
mylist <- findORFsinSeq(randseq) # Find ORFs in "randseq"
lengths <- mylist[[3]] # Find the lengths of ORFs in "randseq"
randseqorflengths <- append(randseqorflengths, lengths, after=length(randseqorflengths))
}
######################################################
# Find all potential start and stop sequences
######################################################
findPotentialStartsAndStops2 <- function(MySeq)
{
# Define a vector with the sequences of potential start and stop codons
codons <- c("atg", "taa", "tag", "tga")
# Find the start positions of all occurrences of "atg" in sequence "sequence"
positions <- start(matchPattern("atg", MySeq ))
# Find the total number of potential start and stop codons in sequence "sequence"
numoccurrences <- length(positions)
# Make a vector "types" containing "numoccurrences" copies of "codon"
types <- rep("atg", numoccurrences)
# Find the number of occurrences of each type of potential start or stop codon
for (i in 2:4)
{
codon <- codons[i]
# Find the start positions of all occurrences of "codon" in sequence "sequence"
codonpositions <- start(matchPattern(codon,MySeq ))
# Find the total number of potential start and stop codons in sequence "sequence"
numoccurrences <- length(codonpositions)
# Add the vector "codonpositions" to the end of vector "positions":
positions <- append(positions, codonpositions, after=length(positions))
# Add the vector "rep(codon, numoccurrences)" to the end of vector "types":
types <- append(types, rep(codon, numoccurrences), after=length(types))
}
# Sort the vectors "positions" and "types" in order of position along the input sequence:
indices <- order(positions)
positions <- positions[indices]
types <- types[indices]
# Return a list variable including vectors "positions" and "types":
mylist <- list(positions,types)
names(mylist) <- c("positions", "types")
return(mylist)
}
######################################################
# Plot potential start and stop sequences.
######################################################
plotPotentialStartsAndStops <- function(sequence)
{
# Make a plot showing the positions of the start and stop codons in the input sequence:
# Draw a line at y=0 from 1 to the length of the sequence:
x <- c(1, nchar(sequence))
print(x)
y <- c(0, 0)
y
plot(
x,
y,
ylim = c(0, 3),
type = "l",
axes = FALSE,
xlab = "Nucleotide",
ylab = "Reading frame",
main = "Predicted start (red) and stop (blue) codons"
)
segments(1, 1, nchar(sequence), 1)
segments(1, 2, nchar(sequence), 2)
# Add the x-axis at y=0:
axis(1, pos = 0)
# Add the y-axis labels:
text(0.9, 0.5, "+1")
text(0.9, 1.5, "+2")
text(0.9, 2.5, "+3")
# Draw in each predicted start/stop codon:
mylist <- findPotentialStartsAndStops2(sequence)
positions = mylist[["positions"]]
types = mylist[["types"]]
numcodons <- length(positions)
for (i in 1:numcodons)
{
position <- positions[i]
type <- types[i]
remainder <- (position - 1) %% 3
if (remainder == 0)
# +1 reading frame
{
if (type == "atg") {
segments(position, 0, position, 1, lwd = 1,col = "red")}
else {
segments(position, 0, position, 1, lwd = 1,col = "blue")}
}
else if (remainder == 1){
if (type == "atg") {
segments(position, 1, position, 2, lwd = 1, col = "red")}
else {
segments(position, 1, position, 2, lwd = 1, col = "blue")}
}
else if (remainder == 2){
if (type == "atg") {
segments(position, 2, position, 3, lwd = 1, col = "red")}
else {
segments(position, 2, position, 3, lwd = 1, col = "blue")}
}
}
}
######################################################
# Plot ORF in sequences
######################################################
plotORFsinSeq <- function(sequence)
{
# Make vectors "positions" and "types" containing information on the positions of ATGs in the sequence:
mylist <- findPotentialStartsAndStops2(sequence)
positions <- mylist[[1]]
types <- mylist[[2]]
# Make vectors "orfstarts" and "orfstops" to store the predicted start and stop codons of ORFs
orfstarts <- numeric()
orfstops <- numeric()
# Make a vector "orflengths" to store the lengths of the ORFs
orflengths <- numeric()
# Print out the positions of ORFs in the sequence:
numpositions <- length(positions) # Find the length of vector "positions"
# There must be at least one start codon and one stop codon to have an ORF.
if (numpositions >= 2)
{
for (i in 1:(numpositions-1))
{
posi <- positions[i]
typei <- types[i]
found <- 0
while (found == 0)
{
for (j in (i+1):numpositions)
{
posj <- positions[j]
typej <- types[j]
posdiff <- posj - posi
posdiffmod3 <- posdiff %% 3
orflength <- posj - posi + 3 # Add in the length of the stop codon
if (typei == "atg" && (typej == "taa" || typej == "tag" || typej == "tga") && posdiffmod3 == 0)
{
# Check if we have already used the stop codon at posj+2 in an ORF
numorfs <- length(orfstops)
usedstop <- -1
if (numorfs > 0)
{
for (k in 1:numorfs)
{
orfstopk <- orfstops[k]
if (orfstopk == (posj + 2)) { usedstop <- 1 }
}
}
if (usedstop == -1)
{
orfstarts <- append(orfstarts, posi, after=length(orfstarts))
orfstops <- append(orfstops, posj+2, after=length(orfstops)) # Including the stop codon.
orflengths <- append(orflengths, orflength, after=length(orflengths))
}
found <- 1
break
}
if (j == numpositions) { found <- 1 }
}
}
}
}
# Sort the final ORFs by start position:
indices <- order(orfstarts)
orfstarts <- orfstarts[indices]
orfstops <- orfstops[indices]
# Make a plot showing the positions of ORFs in the input sequence:
# Draw a line at y=0 from 1 to the length of the sequence:
x <- c(1,nchar(sequence))
y <- c(0,0)
plot(x, y, ylim=c(0,3), type="l", axes=FALSE, xlab="Nucleotide", ylab=
?????"Reading frame", main="Predicted ORFs")
segments(1,1,nchar(sequence),1)
segments(1,2,nchar(sequence),2)
# Add the x-axis at y=0:
axis(1, pos=0)
# Add the y-axis labels:
text(0.9,0.5,"+1")
text(0.9,1.5,"+2")
text(0.9,2.5,"+3")
# Make a plot of the ORFs in the sequence:
numorfs <- length(orfstarts)
for (i in 1:numorfs)
{
orfstart <- orfstarts[i]
orfstop <- orfstops[i]
remainder <- (orfstart-1) %% 3
if (remainder == 0) # +1 reading frame
{
rect(orfstart,0,orfstop,1,col="cyan",border="black")
}
else if (remainder == 1)
{
rect(orfstart,1,orfstop,2,col="cyan",border="black")
}
else if (remainder == 2)
{
rect(orfstart,2,orfstop,3,col="cyan",border="black")
}
}
}
# sequences is pass a a DNA sequences
generateSeqsWithMultinomialModel <- function(sequence, index)
{
My_Base1 <- count(sequence, 1)
# Calculate the percentage in sequences
Pro_Seq <-
c((My_Base1["a"] / sum(My_Base1) * 100),
(My_Base1["g"] / sum(My_Base1) * 100),
(My_Base1["c"] / sum(My_Base1) * 100),
(My_Base1["t"] / sum(My_Base1) * 100)
)
My_Rad_Seq = {
}
for (i in 1:index) {
My_Rad_Seq <- c (My_Rad_Seq,
c2s(sample(
c('a', 'c', 'g', 't'),
length(sequence),
replace = TRUE,
prob = Pro_Seq
)))
}
return (My_Rad_Seq)
}
#generate random sequences
randseqs <- generateSeqsWithMultinomialModel(getSequence(My_Que$req[[1]]), 20)
# find ORF
randseqorflengths <- numeric() # Tell R that we want to make a new vector of numbers
for (i in 1:20)
{
print(i)
randseq <- randseqs[i] # Get the ith random sequence
mylist <- findORFsinSeq(randseq) # Find ORFs in "randseq"
lengths <- mylist[[3]] # Find the lengths of ORFs in "randseq"
randseqorflengths <- append(randseqorflengths, lengths, after=length(randseqorflengths))
}
# plot a histogram of the lengths of the ORFs real vs. random
par(mfrow = c(1,2)) # Make a picture with two plots side-by-side (one row, two columns)
bins <- seq(0,11000,50) # Set the bins for the histogram
hist(randseqorflengths, breaks=bins, col="red", xlim=c(0,1000))
hist(randseqorflengths, breaks=bins, col="red", xlim=c(0,1000))
#generate random sequences
randseqs <- generateSeqsWithMultinomialModel(getSequence(My_Que$req[[1]]), 20)
# find ORF
randseqorflengths <- numeric() # Tell R that we want to make a new vector of numbers
for (i in 1:20)
{
print(i)
randseq <- randseqs[i] # Get the ith random sequence
mylist <- findORFsinSeq(randseq) # Find ORFs in "randseq"
lengths <- mylist[[3]] # Find the lengths of ORFs in "randseq"
randseqorflengths <- append(randseqorflengths, lengths, after=length(randseqorflengths))
}
# plot a histogram of the lengths of the ORFs real vs. random
par(mfrow = c(1,2)) # Make a picture with two plots side-by-side (one row, two columns)
bins <- seq(0,11000,50) # Set the bins for the histogram
hist(randseqorflengths, breaks=bins, col="red", xlim=c(0,1000))
#find the longest random gene
x = max(randseqorflengths)
#use it as a threshold, and discard all ORFs found in the real sequence that are shorter than this
summary(orflengths > x)
#Ex1
# random sequence
nucleotides <- c("a", "t", "c", "g") # Define the alphabet of nucleotides
probabilities1 <- c(0.2, 0.3, 0.3, 0.2) # Set the values of the probabilities
seqlength <- 200 # Set the length of the sequence
s<- sample(nucleotides, seqlength, rep=TRUE, prob=probabilities1) # Generate a
t = table(s)
# check distribution
t["a"]/length(s)
t["t"]/length(s)
t["g"]/length(s)
t["c"]/length(s)
#gene finding..
#method 1
# Find all ATGs in the sequence
library(Biostrings)
# Convert the vector to a string of characters
MySeq <- c2s(s)
matchPattern("tag",MySeq ) #stop codon
# extract a gene
substring(MySeq,76,81)
#method 2
findPotentialStartsAndStops2(MySeq)
#Ex2
#get the data
choosebank("refseqViruses")
Q2 <- query("Q2", "AC=NC_001477")
MySeq <- getSequence(Q2$req[[1]])
g <- findPotentialStartsAndStops2(c2s(MySeq))
#Ex3
plotPotentialStartsAndStops(c2s(MySeq))
#for the first 500 bases
s = c2s(MySeq[1:500])
plotPotentialStartsAndStops(s)
ORF <- findORFsinSeq(s)
#generate random sequences
randseqs <- generateSeqsWithMultinomialModel(dengueseqstring, 10)
#generate random sequences
randseqs <- generateSeqsWithMultinomialModel(getSequence(My_Que$req[[1]]), 20)
# Choose the ACNUC
choosebank("genbank")
My_Que <- query("My_Que", "AC=FJ882953")
# write to fasta file
write.fasta(getSequence(My_Que[['req']][[1]]),getName(My_Que[['req']][[1]]),"SARS.fasta")
findORFsinSeq(My_SeqS)
######################################################
# Find ORF in sequences
######################################################
findORFsinSeq <- function(sequence)
{
require(Biostrings)
# Make vectors "positions" and "types" containing information on the positions of ATGs in the sequence:
mylist <- findPotentialStartsAndStops2(sequence)
positions <- mylist[[1]]
types <- mylist[[2]]
# Make vectors "orfstarts" and "orfstops" to store the predicted start and stop codons of ORFs
orfstarts <- numeric()
orfstops <- numeric()
# Make a vector "orflengths" to store the lengths of the ORFs
orflengths <- numeric()
# Print out the positions of ORFs in the sequence:
# Find the length of vector "positions"
numpositions <- length(positions)
# There must be at least one start codon and one stop codon to have an ORF.
if (numpositions >= 2)
{
for (i in 1:(numpositions-1))
{
posi <- positions[i]
typei <- types[i]
found <- 0
while (found == 0)
{
for (j in (i+1):numpositions)
{
posj <- positions[j]
typej <- types[j]
posdiff <- posj - posi
posdiffmod3 <- posdiff %% 3
# Add in the length of the stop codon
orflength <- posj - posi + 3
if (typei == "atg" && (typej == "taa" || typej == "tag" || typej == "tga") && posdiffmod3 == 0)
{
# Check if we have already used the stop codon at posj+2 in an ORF
numorfs <- length(orfstops)
usedstop <- -1
if (numorfs > 0)
{
for (k in 1:numorfs)
{
orfstopk <- orfstops[k]
if (orfstopk == (posj + 2)) { usedstop <- 1 }
}
}
if (usedstop == -1)
{
orfstarts <- append(orfstarts, posi, after=length(orfstarts))
orfstops <- append(orfstops, posj+2, after=length(orfstops)) # Including the stop codon.
orflengths <- append(orflengths, orflength, after=length(orflengths))
}
found <- 1
break
}
if (j == numpositions) { found <- 1 }
}
}
}
}
# Sort the final ORFs by start position:
indices <- order(orfstarts)
orfstarts <- orfstarts[indices]
orfstops <- orfstops[indices]
# Find the lengths of the ORFs that we have
orflengths <- numeric()
numorfs <- length(orfstarts)
for (i in 1:numorfs)
{
orfstart <- orfstarts[i]
orfstop <- orfstops[i]
orflength <- orfstop - orfstart + 1
orflengths <- append(orflengths,orflength,after=length(orflengths))
}
mylist <- list(orfstarts, orfstops, orflengths)
return(mylist)
}
# Choose the ACNUC
choosebank("genbank")
My_Que <- query("My_Que", "AC=FJ882953")
######################################################
# Find all potential start and stop sequences
######################################################
findPotentialStartsAndStops2 <- function(MySeq)
{
# Define a vector with the sequences of potential start and stop codons
codons <- c("atg", "taa", "tag", "tga")
# Find the start positions of all occurrences of "atg" in sequence "sequence"
positions <- start(matchPattern("atg", MySeq ))
# Find the total number of potential start and stop codons in sequence "sequence"
numoccurrences <- length(positions)
# Make a vector "types" containing "numoccurrences" copies of "codon"
types <- rep("atg", numoccurrences)
# Find the number of occurrences of each type of potential start or stop codon
for (i in 2:4)
{
codon <- codons[i]
# Find the start positions of all occurrences of "codon" in sequence "sequence"
codonpositions <- start(matchPattern(codon,MySeq ))
# Find the total number of potential start and stop codons in sequence "sequence"
numoccurrences <- length(codonpositions)
# Add the vector "codonpositions" to the end of vector "positions":
positions <- append(positions, codonpositions, after=length(positions))
# Add the vector "rep(codon, numoccurrences)" to the end of vector "types":
types <- append(types, rep(codon, numoccurrences), after=length(types))
}
# Sort the vectors "positions" and "types" in order of position along the input sequence:
indices <- order(positions)
positions <- positions[indices]
types <- types[indices]
# Return a list variable including vectors "positions" and "types":
mylist <- list(positions,types)
names(mylist) <- c("positions", "types")
return(mylist)
}
# sequences is pass a a DNA sequences
generateSeqsWithMultinomialModel <- function(sequence, index)
{
My_Base1 <- count(sequence, 1)
# Calculate the percentage in sequences
Pro_Seq <-
c((My_Base1["a"] / sum(My_Base1) * 100),
(My_Base1["g"] / sum(My_Base1) * 100),
(My_Base1["c"] / sum(My_Base1) * 100),
(My_Base1["t"] / sum(My_Base1) * 100)
)
My_Rad_Seq = {
}
for (i in 1:index) {
My_Rad_Seq <- c (My_Rad_Seq,
c2s(sample(
c('a', 'c', 'g', 't'),
length(sequence),
replace = TRUE,
prob = Pro_Seq
)))
}
return (My_Rad_Seq)
}
#generate random sequences
randseqs <- generateSeqsWithMultinomialModel(getSequence(My_Que$req[[1]]), 20)
# sequences is pass a a DNA sequences
generateSeqsWithMultinomialModel <- function(sequence, index)
{
My_Base1 <- count(sequence, 1)
# Calculate the percentage in sequences
Pro_Seq <-
c((My_Base1["a"] / sum(My_Base1) * 100),
(My_Base1["g"] / sum(My_Base1) * 100),
(My_Base1["c"] / sum(My_Base1) * 100),
(My_Base1["t"] / sum(My_Base1) * 100)
)
My_Rad_Seq = {
}
for (i in 1:index) {
My_Rad_Seq <- c (My_Rad_Seq,
c2s(sample(
c('a', 'c', 'g', 't'),
length(sequence),
replace = TRUE,
prob = Pro_Seq
)))
}
return (My_Rad_Seq)
}
#generate random sequences
randseqs <- generateSeqsWithMultinomialModel(getSequence(My_Que$req[[1]]), 20)
# find ORF
randseqorflengths <- numeric() # Tell R that we want to make a new vector of numbers
for (i in 1:20)
{
print(i)
randseq <- randseqs[i] # Get the ith random sequence
mylist <- findORFsinSeq(randseq) # Find ORFs in "randseq"
lengths <- mylist[[3]] # Find the lengths of ORFs in "randseq"
randseqorflengths <- append(randseqorflengths, lengths, after=length(randseqorflengths))
}
# plot a histogram of the lengths of the ORFs real vs. random
par(mfrow = c(1,2)) # Make a picture with two plots side-by-side (one row, two columns)
bins <- seq(0,11000,50) # Set the bins for the histogram
hist(randseqorflengths, breaks=bins, col="red", xlim=c(0,1000))
#find the longest random gene
x = max(randseqorflengths)
#use it as a threshold, and discard all ORFs found in the real sequence that are shorter than this
summary(randseqorflengths > x)
#find and use the 99th quantile as a threshold
quantile(randseqorflengths, probs=c(0.99))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(seqinr)
library(Biostrings)
randseqorflengths
View(randseqorflengths)
