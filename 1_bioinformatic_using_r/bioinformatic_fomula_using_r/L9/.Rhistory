t2 = seqinr::count(Seq2,wordsize=1 )
t2
old.par <- par(mfrow=c(1, 2))
pie(t1,main="Seq1")
pie(t2,main="Seq2")
par(old.par)
View(t1)
t1$Percent <- t1$Freq / sum(t1$Freq)
t1@Percent <- t1@Freq / sum(t1@Freq)
t1
t1[1]
t1[1][1]
t1[1][[1]
t1[1][[1]]
t1[1][0]
t1[1]
t1[[1]]
length(t1)
sum(t1)
for (n in length(t1)){
t[[n]] / sum(t1)
}
for (n in 1:length(t1)){
t[[n]] / sum(t1)
}
for (n in 1:length(t1)){
t[[n]] / sum(t1)
}
c(t1['a']/sum(t1),t1['c']/sum(t1),t1['t']/sum(t1),t1['g']/sum(t1))
c(scales::percent(t1['a']/sum(t1)),t1['c']/sum(t1),t1['t']/sum(t1),t1['g']/sum(t1))
c(scales::percent(t1['a']/sum(t1)),
scales::percent(t1['c']/sum(t1)),
scales::percent(t1['t']/sum(t1)),
scales::percent(t1['g']/sum(t1))
)
t2 = seqinr::count(Seq2,wordsize=1 )
c(scales::percent(t2['a']/sum(t1)),
scales::percent(t2['c']/sum(t1)),
scales::percent(t2['t']/sum(t1)),
scales::percent(t2['g']/sum(t1))
)
old.par <- par(mfrow=c(1, 2))
pie(t1,main="Seq1")
pie(t2,main="Seq2")
par(old.par)
# Compute the percentage of each amino acid
t1 = seqinr::count(Seq1,wordsize=1 )
c(scales::percent(t1['a']/sum(t1)),
scales::percent(t1['c']/sum(t1)),
scales::percent(t1['t']/sum(t1)),
scales::percent(t1['g']/sum(t1))
)
t2 = seqinr::count(Seq2,wordsize=1 )
c(scales::percent(t2['a']/sum(t1)),
scales::percent(t2['c']/sum(t1)),
scales::percent(t2['t']/sum(t1)),
scales::percent(t2['g']/sum(t1))
)
old.par <- par(mfrow=c(1, 2))
pie(t1,main="Seq1")
pie(t2,main="Seq2")
par(old.par)
dotPlot(Seq1,Seq2)
data("BLOSUM50")
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
sigma # Print out the matrix
AlignGlobal<- pairwiseAlignment(Seq1%>% toupper() %>% c2s, Seq22%>% toupper() %>% c2s, gapOpening = 2,substitutionMatrix =sigma)
AlignGlobal<- pairwiseAlignment(Seq1%>% toupper() %>% c2s, Seq2%>% toupper() %>% c2s, gapOpening = 2,substitutionMatrix =sigma)
AlignGlobal<- pairwiseAlignment(Seq1%>% toupper() %>% c2s(), Seq2%>% toupper() %>% c2s(), gapOpening = 2,substitutionMatrix =sigma)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
sigma # Print out the matrix
AlignGlobal<- pairwiseAlignment(toupper(Seq1) %>% c2s(), toupper(Seq2) %>% c2s(), gapOpening = 2,substitutionMatrix =sigma)
Str1<-Seq1%>% toupper() %>% c2s
Str2<-Seq2%>% toupper() %>% c2s
AlignGlobal<- pairwiseAlignment(Str1,Str2 , gapOpening = 2,substitutionMatrix =sigma)
AlignGlobal<- pairwiseAlignment(Str1[1:20],Str2[1:20] , gapOpening = 2,substitutionMatrix =sigma)
Str1<-Seq1[1:20]%>% toupper() %>% c2s
Str2<-Seq2[1:20]%>% toupper() %>% c2s
AlignGlobal<- pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix =sigma)
AlignGlobal<- pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix =sigma,scoreOnly = FALSE)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
sigma # Print out the matrix
Str1<-Seq1[1:20]%>% toupper() %>% c2s
Str2<-Seq2[1:20]%>% toupper() %>% c2s
AlignGlobal<- pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix =sigma,scoreOnly = FALSE)
AlignGlobal<- seqinr::pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix =sigma, scoreOnly = FALSE)
AlignGlobal<- Biostrings::pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix =sigma, scoreOnly = FALSE)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
sigma # Print out the matrix
Str1<-Seq1[1:20]%>% toupper() %>% c2s
Str2<-Seq2[1:20]%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix =sigma, scoreOnly = FALSE)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
sigma # Print out the matrix
Str1<-Seq1[1:20]%>% toupper() %>% c2s
Str2<-Seq2[1:20]%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix =sigma, scoreOnly = FALSE)
AlignGlobal<- Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix =sigma, scoreOnly = FALSE)
install.packages(c("arules", "e1071", "Matrix", "RCurl", "rms", "survival", "utf8"))
install.packages(c("arules", "e1071", "Matrix", "RCurl", "rms", "survival", "utf8"))
install.packages(c("arules", "e1071", "Matrix", "RCurl", "rms", "survival", "utf8"))
install.packages(c("arules", "e1071", "Matrix", "RCurl", "rms", "survival", "utf8"))
install.packages(c("arules", "e1071", "Matrix", "RCurl", "rms", "survival", "utf8"))
install.packages(c("arules", "e1071", "Matrix", "RCurl", "rms", "survival", "utf8"))
Seq4 <- "PAWHEAE"
Seq5 <- "HEAGAWGHEE"
pairwiseAlignment(Seq4, Seq5, gapOpening = -2, gapExtension = -8,substitutionMatrix =BLOSUM50)
library(seqinr)
library(Biostrings)
pairwiseAlignment(Seq4, Seq5, gapOpening = -2, gapExtension = -8,substitutionMatrix =BLOSUM50)
?nucleotideSubstitutionMatrix
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(seqinr)
library(tidyverse)
library(Biostrings)
data("BLOSUM50")
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = FALSE, type = "RNA")
sigma # Print out the matrix
Str1<-Seq1[1:20]%>% toupper() %>% c2s
Str2<-Seq2[1:20]%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix =sigma, scoreOnly = FALSE)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = FALSE, type = "RNA")
sigma # Print out the matrix
Str1<-Seq1[1:20]%>% toupper() %>% c2s
Str2<-Seq2[1:20]%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix =sigma, scoreOnly = FALSE)
AlignGlobal<- Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix =BLOSUM50)
View(AlignGlobal)
Str1<-Seq1%>% toupper() %>% c2s
Str2<-Seq2%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = BLOSUM50)
Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = sigma)
AlignGlobal<- Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = BLOSUM50)
sigma # Print out the matrix
View(sigma)
View(BLOSUM50)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = FALSE, type = "RNA")
View(sigma)
View(BLOSUM50)
View(sigma)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = FALSE, type = "RNA")
sigma # Print out the matrix
Str1<-Seq1%>% toupper() %>% c2s
Str2<-Seq2%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = BLOSUM50)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE, type = "RNA")
sigma # Print out the matrix
Str1<-Seq1%>% toupper() %>% c2s
Str2<-Seq2%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = BLOSUM50)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = FALSE, type = "RNA")
sigma # Print out the matrix
AlignGlobal<- Biostrings::pairwiseAlignment(Seq1%>% toupper() %>% c2s,Seq2%>% toupper() %>% c2s, gapOpening = 2,substitutionMatrix = BLOSUM50)
View(AlignGlobal)
source("printPairwiseAlignment.r")
source("printPairwiseAlignment.R")
AlignGlobal
printPairwiseAlignment(AlignGlobal)
AlignGlobal<- Biostrings::pairwiseAlignment(Seq1[1:20]%>% toupper() %>% c2s,Seq2[1:20]%>% toupper() %>% c2s, gapOpening = 2,substitutionMatrix = BLOSUM50)
printPairwiseAlignment(AlignGlobal)
AlignGlobal
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = FALSE, type = "RNA")
sigma # Print out the matrix
Str1<-Seq1%>% toupper() %>% c2s
Str2<-Seq2%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(Seq1%>% toupper() %>% c2s,Seq2%>% toupper() %>% c2s, gapOpening = 2,substitutionMatrix = BLOSUM50)
Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = BLOSUM50)
Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = sigma)
printPairwiseAlignment(AlignGlobal)
printPairwiseAlignment(AlignGlobal,20)
source("generateSeqsWithMultinomialModel.R")
randomSeq <- generateSeqsWithMultinomialModel(Seq2,50)
randomSeq <- generateSeqsWithMultinomialModel(Seq2,50)
randomscores <- double(50)
for (i in 1:50)
{
score <- pairwiseAlignment(Seq1, randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2)
randomscores[i] <- score
}
randomSeq <- generateSeqsWithMultinomialModel(Seq2%>% toupper() %>% c2s,50)
randomscores <- double(50)
for (i in 1:50)
{
score <- pairwiseAlignment(Seq1%>% toupper() %>% c2s, randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2)
randomscores[i] <- score
}
randomSeq <- generateSeqsWithMultinomialModel(Seq2%>% toupper() %>% c2s,50)
View(randomSeq)
randomscores <- double(50)
randomSeq <- generateSeqsWithMultinomialModel(Seq2%>% toupper() %>% c2s,50)
randomscores <- double(50)
for (i in 1:50)
{
score <- Biostrings::pairwiseAlignment(Seq1%>% toupper() %>% c2s, randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2)
randomscores[i] <- score
}
randomSeq <- generateSeqsWithMultinomialModel(Str2,50)
randomscores <- double(50)
for (i in 1:50)
{
score <- Biostrings::pairwiseAlignment(Str1, randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2)
randomscores[i] <- score
}
randomSeq <- generateSeqsWithMultinomialModel(Str2,50)
randomscores <- double(50)
for (i in 1:50)
{
score <- Biostrings::pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2)
randomscores[i] <- score
}
randomSeq <- generateSeqsWithMultinomialModel(Str2,50)
randomscores <- double(50)
for (i in 1:50)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
Pvalue <- sum(randomscores>AlignGlobal@score)
sum(randomscores>AlignGlobal@score)
randomSeq <- generateSeqsWithMultinomialModel(Str2,100)
randomscores <- double(100)
for (i in 1:100)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
sum(randomscores>AlignGlobal@score)
randomSeq <- generateSeqsWithMultinomialModel(Str2,1000)
randomscores <- double(1000)
for (i in 1:1000)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
sum(randomscores>AlignGlobal@score)
sum(randomscores>=AlignGlobal@score)
randomSeq <- generateSeqsWithMultinomialModel(Str2,100)
randomscores <- double(100)
for (i in 1:100)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
sum(randomscores>=AlignGlobal@score)
randomSeq <- generateSeqsWithMultinomialModel(Str2,1000)
randomscores <- double(1000)
for (i in 1:1000)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
sum(randomscores>=AlignGlobal@score)
sum(randomscores>=AlignGlobal@score)/1000
randomSeq <- generateSeqsWithMultinomialModel(Seq2%>% toupper() %>% c2s,1000)
randomscores <- double(1000)
for (i in 1:1000)
{
score <- pairwiseAlignment(Seq1%>% toupper() %>% c2, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
randomSeq <- generateSeqsWithMultinomialModel(Seq2%>% toupper() %>% c2s,1000)
randomscores <- double(1000)
for (i in 1:1000)
{
score <- pairwiseAlignment(Seq1%>% toupper() %>% c2s, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
sum(randomscores>=AlignGlobal@score)/1000
sigma <- nucleotideSubstitutionMatrix(match = 3, mismatch = -2, baseOnly = FALSE, type = "RNA")
sigma # Print out the matrix
AlignLlobal<- Biostrings::pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix = sigma,type="local" )
sigma <- nucleotideSubstitutionMatrix(match = 3, mismatch = -2, baseOnly = FALSE, type = "RNA")
sigma # Print out the matrix
AlignLlobal<- Biostrings::pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix = BLOSUM50,type="local" )
sigma2 <- nucleotideSubstitutionMatrix(match = 3, mismatch = -2, baseOnly = FALSE, type = "RNA")
AlignLlobal<- Biostrings::pairwiseAlignment(Str1,Str2, gapOpening = 2,substitutionMatrix = BLOSUM50,type="local" )
sigma2 <- nucleotideSubstitutionMatrix(match = 3, mismatch = -2, baseOnly = FALSE, type = "RNA")
AlignLlobal<- Biostrings::pairwiseAlignment(Str1,Str2, gapOpening = 4, gapExtension= 2, substitutionMatrix = BLOSUM50,type="local" )
AlignLlobal
AlignGlobal@score
AlignLocal<- Biostrings::pairwiseAlignment(Str1,Str2, gapOpening = 4, gapExtension= 2, substitutionMatrix = BLOSUM50,type="local" )
AlignLocal
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(seqinr)
library(tidyverse)
library(Biostrings)
data("BLOSUM50")
source("printPairwiseAlignment.R")
source("generateSeqsWithMultinomialModel.R")
# Download the two sequences and store in 1 fasta file
MySeq <- read.fasta("uniProtList.fasta")
# Get Sequences get the sequences out of the string
Seq1 <- getSequence(MySeq[[1]])
Seq2 <- getSequence(MySeq[[2]])
# %>% toupper() %>% c2s
# Compute the percentage of each amino acid
t1 = seqinr::count(Seq1,wordsize=1 )
c(scales::percent(t1['a']/sum(t1)),
scales::percent(t1['c']/sum(t1)),
scales::percent(t1['t']/sum(t1)),
scales::percent(t1['g']/sum(t1))
)
t2 = seqinr::count(Seq2,wordsize=1 )
c(scales::percent(t2['a']/sum(t1)),
scales::percent(t2['c']/sum(t1)),
scales::percent(t2['t']/sum(t1)),
scales::percent(t2['g']/sum(t1))
)
old.par <- par(mfrow=c(1, 2))
pie(t1,main="Seq1")
pie(t2,main="Seq2")
par(old.par)
dotPlot(Seq1,Seq2)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = FALSE, type = "RNA")
sigma # Print out the matrix
Str1<-Seq1%>% toupper() %>% c2s
Str2<-Seq2%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(Seq1%>% toupper() %>% c2s,Seq2%>% toupper() %>% c2s, gapOpening = 2,substitutionMatrix = BLOSUM50)
# Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = sigma)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = FALSE, type = "RNA")
# sigma # Print out the matrix
Str1<-Seq1%>% toupper() %>% c2s
Str2<-Seq2%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(Seq1%>% toupper() %>% c2s,Seq2%>% toupper() %>% c2s, gapOpening = 2,substitutionMatrix = BLOSUM50)
# Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = sigma)
randomSeq <- generateSeqsWithMultinomialModel(Str2,1000)
randomscores <- double(1000)
for (i in 1:1000)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
AlignGlobal@score
sum(randomscores>=AlignGlobal@score)/1000
sigma2 <- nucleotideSubstitutionMatrix(match = 3, mismatch = -2, baseOnly = FALSE, type = "RNA")
AlignLocal<- Biostrings::pairwiseAlignment(Str1,Str2, gapOpening = 4, gapExtension= 2, substitutionMatrix = BLOSUM50,type="local" )
AlignLocal
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(seqinr)
library(tidyverse)
library(Biostrings)
data("BLOSUM50")
source("printPairwiseAlignment.R")
source("generateSeqsWithMultinomialModel.R")
# Download the two sequences and store in 1 fasta file
MySeq <- read.fasta("uniProtList.fasta")
# Get Sequences get the sequences out of the string
Seq1 <- getSequence(MySeq[[1]])
Seq2 <- getSequence(MySeq[[2]])
# %>% toupper() %>% c2s
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(seqinr)
library(tidyverse)
library(Biostrings)
data("BLOSUM50")
source("printPairwiseAlignment.R")
source("generateSeqsWithMultinomialModel.R")
# Download the two sequences and store in 1 fasta file
MySeq <- read.fasta("uniProtList.fasta")
# Get Sequences get the sequences out of the string
Seq1 <- getSequence(MySeq[[1]])
Seq2 <- getSequence(MySeq[[2]])
# %>% toupper() %>% c2s
# Compute the percentage of each amino acid
t1 = seqinr::count(Seq1,wordsize=1 )
c(scales::percent(t1['a']/sum(t1)),
scales::percent(t1['c']/sum(t1)),
scales::percent(t1['t']/sum(t1)),
scales::percent(t1['g']/sum(t1))
)
t2 = seqinr::count(Seq2,wordsize=1 )
c(scales::percent(t2['a']/sum(t1)),
scales::percent(t2['c']/sum(t1)),
scales::percent(t2['t']/sum(t1)),
scales::percent(t2['g']/sum(t1))
)
old.par <- par(mfrow=c(1, 2))
pie(t1,main="Seq1")
pie(t2,main="Seq2")
par(old.par)
library(Peptides)
install.packages("Peptides")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(seqinr)
library(tidyverse)
library(Biostrings)
library(Peptides)
data("BLOSUM50")
source("printPairwiseAlignment.R")
source("generateSeqsWithMultinomialModel.R")
tt1 <- aaComp(Seq1)
View(tt1)
tt2 <- aaComp(Seq2)
old.par <- par(mfrow=c(1, 2))
pie(tt1,main="Seq1")
View(tt2)
tt1 <- basicAA(Seq1)
tt2 <- basicAA(Seq2)
View(tt1)
tt1 <- aaComp(Seq1%>% toupper() %>% c2s)
tt2 <- aaComp(Seq2%>% toupper() %>% c2s)
View(tt1)
tt1[[1]]
old.par <- par(mfrow=c(1, 2))
pie(tt1,main="Seq1")
old.par <- par(mfrow=c(1, 2))
pie(tt1[[1]],main="Seq1")
pie(tt2[[1]],main="Seq2")
par(old.par)
# Compute the percentage of each amino acid
tt1 <- aaComp(Seq1%>% toupper() %>% c2s)
tt2 <- aaComp(Seq2%>% toupper() %>% c2s)
old.par <- par(mfrow=c(1, 2))
pie(tt1[[1]],main="Seq1")
pie(tt2[[1]],main="Seq2")
par(old.par)
# Compute the percentage of each amino acid
tt1 <- aaComp(Seq1%>% toupper() %>% c2s)
tt2 <- aaComp(Seq2%>% toupper() %>% c2s)
tt1
tt2
old.par <- par(mfrow=c(1, 2))
pie(tt1[[1]],main="Seq1")
pie(tt2[[1]],main="Seq2")
par(old.par)
dotPlot(Seq1,Seq2)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = FALSE, type = "RNA")
# sigma # Print out the matrix
Str1<-Seq1%>% toupper() %>% c2s
Str2<-Seq2%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(Seq1%>% toupper() %>% c2s,Seq2%>% toupper() %>% c2s, gapOpening = 2,substitutionMatrix = BLOSUM50)
# Biostrings::pairwiseAlignment(subject = Str1,pattern=Str2, gapOpening = 2,substitutionMatrix = sigma)
Str1<-Seq1%>% toupper() %>% c2s
Str2<-Seq2%>% toupper() %>% c2s
AlignGlobal<- Biostrings::pairwiseAlignment(Seq1%>% toupper() %>% c2s,Seq2%>% toupper() %>% c2s, gapOpening = 2,substitutionMatrix = BLOSUM50)
printPairwiseAlignment(AlignGlobal,20)
randomSeq <- generateSeqsWithMultinomialModel(Str2,1000)
randomscores <- double(1000)
for (i in 1:1000)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
AlignGlobal@score
sum(randomscores>=AlignGlobal@score)/1000
randomSeq <- generateSeqsWithMultinomialModel(Str2,100)
randomscores <- double(100)
for (i in 1:100)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
# Alignment Score from Seq1 and Seq2
AlignGlobal@score
# Find all the Score > AlignGlobal@score and /1000
sum(randomscores>=AlignGlobal@score)/1000
randomSeq <- generateSeqsWithMultinomialModel(Str2,100)
randomscores <- double(100)
for (i in 1:100)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
# Alignment Score from Seq1 and Seq2
AlignGlobal@score
# Find all the Score > AlignGlobal@score and /1000
sum(randomscores>=AlignGlobal@score)/1000
set. seed()
set. seed(123)
set. seed(123)
set. seed(1)
set. seed(1)
set.seed(1)
randomSeq <- generateSeqsWithMultinomialModel(Str2,100)
randomscores <- double(100)
for (i in 1:100)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
# Alignment Score from Seq1 and Seq2
AlignGlobal@score
# Find all the Score > AlignGlobal@score and /1000
sum(randomscores>=AlignGlobal@score)/1000
# Alignment Score from Seq1 and Seq2
AlignGlobal@score
# Find all the Score > AlignGlobal@score and /1000
sum(randomscores>=AlignGlobal@score)/1000
set.seed(1)
randomSeq <- generateSeqsWithMultinomialModel(Str2,100)
randomscores <- double(100)
for (i in 1:100)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
# Alignment Score from Seq1 and Seq2
AlignGlobal@score
# Find all the Score > AlignGlobal@score and /1000
sum(randomscores>=AlignGlobal@score)/1000
set.seed(123)
randomSeq <- generateSeqsWithMultinomialModel(Str2,100)
randomscores <- double(100)
for (i in 1:100)
{
score <- pairwiseAlignment(Str1, pattern=randomSeq[[i]], substitutionMatrix = BLOSUM50, gapOpening = 2,scoreOnly = TRUE)
randomscores[i] <- score
}
# Alignment Score from Seq1 and Seq2
AlignGlobal@score
# Find all the Score > AlignGlobal@score and /1000
sum(randomscores>=AlignGlobal@score)/1000
